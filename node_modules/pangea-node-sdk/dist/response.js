const SupportedJSONFields = ["message", "new", "old"];
/**
 * Pangea Response object
 */
export class ResponseObject {
    constructor(body) {
        Object.defineProperty(this, "request_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidPayloadReceived"
        });
        Object.defineProperty(this, "request_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidPayloadReceived"
        });
        Object.defineProperty(this, "response_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidPayloadReceived"
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidPayloadReceived"
        });
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "summary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidPayloadReceived"
        });
        Object.assign(this, body);
    }
}
export class PangeaResponse extends ResponseObject {
    constructor(response) {
        const obj = JSON.parse(JSON.stringify(response.body), parseJSONfields);
        super(obj);
        Object.defineProperty(this, "gotResponse", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.gotResponse = response;
        this.success = this.status === "Success";
        this.result = this.result == null ? {} : this.result;
    }
    // Return raw Pangea API response body
    body() {
        return this.gotResponse?.body;
    }
    // Return SDK PangeaResponse object as JSON (excluded raw API response body)
    toJSON() {
        return JSON.stringify({ ...this, gotResponse: undefined }, null, "  ");
    }
}
function parseJSONfields(key, value) {
    if (SupportedJSONFields.includes(key) && typeof value === "string") {
        try {
            // @ts-ignore
            const obj = JSON.parse(value);
            return obj;
        }
        catch (e) {
            return value;
        }
    }
    else {
        return value;
    }
}
export default PangeaResponse;
