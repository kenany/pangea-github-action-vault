export var ConfigEnv;
(function (ConfigEnv) {
    ConfigEnv["LOCAL"] = "local";
    ConfigEnv["PRODUCTION"] = "production";
})(ConfigEnv || (ConfigEnv = {}));
/**
 * Intel services interface definitions
 */
export var Intel;
(function (Intel) {
    let HashType;
    (function (HashType) {
        HashType["SHA256"] = "sha256";
        HashType["SHA1"] = "sha1";
        HashType["SHA512"] = "sha512";
        HashType["NTLM"] = "ntlm";
    })(HashType = Intel.HashType || (Intel.HashType = {}));
    let User;
    (function (User) {
        let Password;
        (function (Password) {
            let PasswordStatus;
            (function (PasswordStatus) {
                PasswordStatus[PasswordStatus["BREACHED"] = 0] = "BREACHED";
                PasswordStatus[PasswordStatus["UNBREACHED"] = 1] = "UNBREACHED";
                PasswordStatus[PasswordStatus["INCONCLUSIVE"] = 2] = "INCONCLUSIVE";
            })(PasswordStatus = Password.PasswordStatus || (Password.PasswordStatus = {}));
        })(Password = User.Password || (User.Password = {}));
    })(User = Intel.User || (Intel.User = {}));
})(Intel || (Intel = {}));
/**
 * Vault services interface definitions
 */
export var Vault;
(function (Vault) {
    let KeyPurpose;
    (function (KeyPurpose) {
        KeyPurpose["SIGNING"] = "signing";
        KeyPurpose["ENCRYPTION"] = "encryption";
        KeyPurpose["JWT"] = "jwt";
    })(KeyPurpose = Vault.KeyPurpose || (Vault.KeyPurpose = {}));
    let AsymmetricAlgorithm;
    (function (AsymmetricAlgorithm) {
        AsymmetricAlgorithm["Ed25519"] = "ED25519";
        AsymmetricAlgorithm["RSA2048_PKCS1V15_SHA256"] = "RSA-PKCS1V15-2048-SHA256";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA256"] = "RSA-OAEP-2048-SHA256";
        AsymmetricAlgorithm["ES256"] = "ES256";
        AsymmetricAlgorithm["ES384"] = "ES384";
        AsymmetricAlgorithm["ES512"] = "ES512";
        AsymmetricAlgorithm["ES256K"] = "ES256K";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA1"] = "RSA-OAEP-2048-SHA1";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA512"] = "RSA-OAEP-2048-SHA512";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA1"] = "RSA-OAEP-3072-SHA1";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA256"] = "RSA-OAEP-3072-SHA256";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA512"] = "RSA-OAEP-3072-SHA512";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA1"] = "RSA-OAEP-4096-SHA1";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA256"] = "RSA-OAEP-4096-SHA256";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA512"] = "RSA-OAEP-4096-SHA512";
        AsymmetricAlgorithm["RSA2048_PSS_SHA256"] = "RSA-PSS-2048-SHA256";
        AsymmetricAlgorithm["RSA3072_PSS_SHA256"] = "RSA-PSS-3072-SHA256";
        AsymmetricAlgorithm["RSA4096_PSS_SHA256"] = "RSA-PSS-4096-SHA256";
        AsymmetricAlgorithm["RSA4096_PSS_SHA512"] = "RSA-PSS-4096-SHA512";
        AsymmetricAlgorithm["RSA"] = "RSA-PKCS1V15-2048-SHA256";
    })(AsymmetricAlgorithm = Vault.AsymmetricAlgorithm || (Vault.AsymmetricAlgorithm = {}));
    let SymmetricAlgorithm;
    (function (SymmetricAlgorithm) {
        SymmetricAlgorithm["HS256"] = "HS256";
        SymmetricAlgorithm["HS384"] = "HS384";
        SymmetricAlgorithm["HS512"] = "HS512";
        SymmetricAlgorithm["AES128_CFB"] = "AES-CFB-128";
        SymmetricAlgorithm["AES256_CFB"] = "AES-CFB-256";
        SymmetricAlgorithm["AES256_GCM"] = "AES-GCM-256";
        SymmetricAlgorithm["AES"] = "AES-CFB-128";
    })(SymmetricAlgorithm = Vault.SymmetricAlgorithm || (Vault.SymmetricAlgorithm = {}));
    let ItemType;
    (function (ItemType) {
        ItemType["ASYMMETRIC_KEY"] = "asymmetric_key";
        ItemType["SYMMETRIC_KEY"] = "symmetric_key";
        ItemType["SECRET"] = "secret";
        ItemType["PANGEA_TOKEN"] = "pangea_token";
    })(ItemType = Vault.ItemType || (Vault.ItemType = {}));
    let ItemState;
    (function (ItemState) {
        ItemState["ENABLED"] = "ENABLED";
        ItemState["DISABLED"] = "disabled";
    })(ItemState = Vault.ItemState || (Vault.ItemState = {}));
    let ItemVersionState;
    (function (ItemVersionState) {
        ItemVersionState["ACTIVE"] = "active";
        ItemVersionState["DEACTIVATED"] = "deactivated";
        ItemVersionState["SUSPENDED"] = "suspended";
        ItemVersionState["COMPROMISED"] = "compromised";
        ItemVersionState["DESTROYED"] = "destroyed";
    })(ItemVersionState = Vault.ItemVersionState || (Vault.ItemVersionState = {}));
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = Vault.ItemOrder || (Vault.ItemOrder = {}));
    let ItemOrderBy;
    (function (ItemOrderBy) {
        ItemOrderBy["TYPE"] = "type";
        ItemOrderBy["CREATED_AT"] = "created_at";
        ItemOrderBy["DESTROYED_AT"] = "destroyed_at";
        ItemOrderBy["PURPOSE"] = "purpose";
        ItemOrderBy["EXPIRATION"] = "expiration";
        ItemOrderBy["LAST_ROTATED"] = "last_rotated";
        ItemOrderBy["NEXT_ROTATION"] = "next_rotation";
        ItemOrderBy["NAME"] = "name";
        ItemOrderBy["FOLDER"] = "folder";
        ItemOrderBy["VERSION"] = "version";
    })(ItemOrderBy = Vault.ItemOrderBy || (Vault.ItemOrderBy = {}));
    let Secret;
    (function (Secret) {
        Secret.Algorithm = {
            BASE32: "base32",
        };
    })(Secret = Vault.Secret || (Vault.Secret = {}));
})(Vault || (Vault = {}));
export var AuthN;
(function (AuthN) {
    let IDProvider;
    (function (IDProvider) {
        IDProvider["FACEBOOK"] = "facebook";
        IDProvider["GITHUB"] = "github";
        IDProvider["GOOGLE"] = "google";
        IDProvider["MICROSOFT_ONLINE"] = "microsoftonline";
        IDProvider["PASSWORD"] = "password";
    })(IDProvider = AuthN.IDProvider || (AuthN.IDProvider = {}));
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = AuthN.ItemOrder || (AuthN.ItemOrder = {}));
    let MFAProvider;
    (function (MFAProvider) {
        MFAProvider["TOTP"] = "totp";
        MFAProvider["EMAIL_OTP"] = "email_otp";
        MFAProvider["SMS_OTP"] = "sms_otp";
    })(MFAProvider = AuthN.MFAProvider || (AuthN.MFAProvider = {}));
    let FlowType;
    (function (FlowType) {
        FlowType["SIGNIN"] = "signin";
        FlowType["SIGNUP"] = "signup";
    })(FlowType = AuthN.FlowType || (AuthN.FlowType = {}));
    let TokenType;
    (function (TokenType) {
        TokenType["USER"] = "user";
        TokenType["SERVICE"] = "service";
        TokenType["CLIENT"] = "client";
        TokenType["SESSION"] = "session";
    })(TokenType = AuthN.TokenType || (AuthN.TokenType = {}));
    let Agreements;
    (function (Agreements) {
        let AgreementType;
        (function (AgreementType) {
            AgreementType["EULA"] = "eula";
            AgreementType["PRIVACY_POLICY"] = "privacy_policy";
        })(AgreementType = Agreements.AgreementType || (Agreements.AgreementType = {}));
        let AgreementListOrderBy;
        (function (AgreementListOrderBy) {
            AgreementListOrderBy["ID"] = "id";
            AgreementListOrderBy["CREATED_AT"] = "created_at";
            AgreementListOrderBy["NAME"] = "name";
            AgreementListOrderBy["TEXT"] = "text";
        })(AgreementListOrderBy = Agreements.AgreementListOrderBy || (Agreements.AgreementListOrderBy = {}));
    })(Agreements = AuthN.Agreements || (AuthN.Agreements = {}));
    let Flow;
    (function (Flow) {
        let Choice;
        (function (Choice) {
            Choice["AGREEMENTS"] = "agreements";
            Choice["CAPTCHA"] = "captcha";
            Choice["EMAIL_OTP"] = "email_otp";
            Choice["MAGICLINK"] = "magiclink";
            Choice["PASSWORD"] = "password";
            Choice["PROFILE"] = "profile";
            Choice["PROVISIONAL_ENROLLMENT"] = "provisional_enrollment";
            Choice["RESET_PASSWORD"] = "reset_password";
            Choice["SET_EMAIL"] = "set_mail";
            Choice["SET_PASSWORD"] = "set_password";
            Choice["SMS_OTP"] = "sms_otp";
            Choice["SOCIAL"] = "social";
            Choice["TOTP"] = "totp";
            Choice["VERIFY_EMAIL"] = "verify_email";
        })(Choice = Flow.Choice || (Flow.Choice = {}));
    })(Flow = AuthN.Flow || (AuthN.Flow = {}));
    let User;
    (function (User) {
        let ListOrderBy;
        (function (ListOrderBy) {
            ListOrderBy["ID"] = "id";
            ListOrderBy["CREATED_AT"] = "created_at";
            ListOrderBy["LAST_LOGIN_AT"] = "last_login_at";
            ListOrderBy["EMAIL"] = "email";
        })(ListOrderBy = User.ListOrderBy || (User.ListOrderBy = {}));
        let Invite;
        (function (Invite) {
            let OrderBy;
            (function (OrderBy) {
                OrderBy["ID"] = "id";
                OrderBy["CREATED_AT"] = "created_at";
                OrderBy["TYPE"] = "type";
                OrderBy["EXPIRE"] = "expire";
                OrderBy["CALLBACK"] = "callback";
                OrderBy["STATE"] = "state";
                OrderBy["EMAIL"] = "email";
                OrderBy["INVITER"] = "inviter";
                OrderBy["INVITE_ORG"] = "invite_org";
            })(OrderBy = Invite.OrderBy || (Invite.OrderBy = {}));
        })(Invite = User.Invite || (User.Invite = {}));
    })(User = AuthN.User || (AuthN.User = {}));
})(AuthN || (AuthN = {}));
