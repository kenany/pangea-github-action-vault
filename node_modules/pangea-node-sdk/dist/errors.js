export var PangeaErrors;
(function (PangeaErrors) {
    class PangeaError extends Error {
        constructor(message) {
            super(message);
            this.name = "PangeaGeneralError";
        }
    }
    PangeaErrors.PangeaError = PangeaError;
    class AuditError extends PangeaError {
        constructor(message) {
            super(message);
            this.name = "PangeaAuditError";
        }
    }
    PangeaErrors.AuditError = AuditError;
    class AuditEventError extends AuditError {
        constructor(message, envelope) {
            super(message);
            Object.defineProperty(this, "envelope", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.name = "PangeaAuditEventError";
            this.envelope = envelope;
        }
    }
    PangeaErrors.AuditEventError = AuditEventError;
    class APIError extends Error {
        constructor(message, response) {
            super(message);
            Object.defineProperty(this, "response", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.name = "PangeanAPIError";
            response.result = response.result;
            this.response = response;
        }
        get pangeaResponse() {
            return this.response;
        }
        get summary() {
            return this.response.summary;
        }
        get errors() {
            return this.response.result?.errors || [];
        }
        toString() {
            let ret = `Summary: ${this.response.summary}\n`;
            ret += `status: ${this.response.status}\n`;
            ret += `request_id: ${this.response.request_id}\n`;
            ret += `request_time: ${this.response.request_time}\n`;
            ret += `response_time: ${this.response.response_time}\n`;
            (this.response.result?.errors || []).forEach((ef) => {
                ret += `\t${ef.source} ${ef.code}: ${ef.detail}\n`;
            });
            return ret;
        }
    }
    PangeaErrors.APIError = APIError;
    //Pangea Validation Errors denoting issues with an API request
    class ValidationError extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "ValidationError";
        }
    }
    PangeaErrors.ValidationError = ValidationError;
    //Too many requests were made
    class RateLimiteError extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "RateLimiteError";
        }
    }
    PangeaErrors.RateLimiteError = RateLimiteError;
    class NotFound extends APIError {
        constructor(url, response) {
            super("Resource " + url + " not found", response);
            this.name = "NotFound";
        }
    }
    PangeaErrors.NotFound = NotFound;
    //API usage requires payment"""
    class NoCreditError extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "NoCreditError";
        }
    }
    PangeaErrors.NoCreditError = NoCreditError;
    //User is not authorized to access a given resource
    class UnauthorizedError extends APIError {
        constructor(serviceName, response) {
            let message = "User is not authorized to access service " + serviceName;
            super(message, response);
            this.name = "UnauthorizedError";
        }
    }
    PangeaErrors.UnauthorizedError = UnauthorizedError;
    // Service not enabled
    class ServiceNotEnabledError extends APIError {
        constructor(serviceName, response) {
            let message = String(serviceName) +
                " is not enabled. Go to console.pangea.cloud/service/{service_name} to enable";
            super(message, response);
            this.name = "ServiceNotEnabledError";
        }
    }
    PangeaErrors.ServiceNotEnabledError = ServiceNotEnabledError;
    // No config ID was provided in either token scopes or explicitly
    class MissingConfigID extends APIError {
        constructor(serviceName, response) {
            let message = "Token did not contain a config scope for service " +
                serviceName +
                ". Create a new token or provide a config ID explicitly in the service base";
            super(message, response);
            this.name = "ServiceNotEnabledError";
        }
    }
    PangeaErrors.MissingConfigID = MissingConfigID;
    // Downstream provider error
    class ProviderError extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "ProviderError";
        }
    }
    PangeaErrors.ProviderError = ProviderError;
    // A pangea service error
    class InternalServerError extends APIError {
        constructor(response) {
            const message = `summary: ${response.summary}. request_id: ${response.request_id}. request_time: ${response.request_time}. response_time: ${response.response_time}`;
            super(message, response);
            this.name = "InternalServerError";
        }
    }
    PangeaErrors.InternalServerError = InternalServerError;
    // Accepted request exception. Async response
    class AcceptedRequestException extends APIError {
        constructor(response) {
            const message = `summary: ${response.summary}. request_id: ${response.request_id}.`;
            super(message, response);
            Object.defineProperty(this, "request_id", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.request_id = response.request_id;
            this.name = "AcceptedRequestException";
        }
    }
    PangeaErrors.AcceptedRequestException = AcceptedRequestException;
    // Service is not currently available
    class ServiceNotAvailableError extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "ServiceNotAvailableError";
        }
    }
    PangeaErrors.ServiceNotAvailableError = ServiceNotAvailableError;
    class InvalidPayloadReceived extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "InvalidPayloadReceived";
        }
    }
    PangeaErrors.InvalidPayloadReceived = InvalidPayloadReceived;
    class ForbiddenVaultOperation extends APIError {
        constructor(message, response) {
            super(message, response);
            this.name = "ForbiddenVaultOperation";
        }
    }
    PangeaErrors.ForbiddenVaultOperation = ForbiddenVaultOperation;
})(PangeaErrors || (PangeaErrors = {}));
