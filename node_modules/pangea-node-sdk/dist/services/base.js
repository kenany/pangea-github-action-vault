import PangeaConfig from "../config.js";
import PangeaRequest from "../request.js";
class BaseService {
    /*
    Required:
      - serviceName: name of the service
      - token: a token to use with the service
  
    Optional:
      - config: a PangeaConfig object, uses defaults if non passed
    */
    constructor(serviceName, token, config, configID) {
        Object.defineProperty(this, "serviceName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "request_", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "configID", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!serviceName)
            throw new Error("A serviceName is required");
        if (!token)
            throw new Error("A token is required");
        this.serviceName = serviceName;
        this.token = token;
        this.configID = configID;
        this.config = new PangeaConfig({ ...config }) || new PangeaConfig();
    }
    async get(endpoint) {
        return await this.request.get(endpoint);
    }
    async post(endpoint, data, options = {}) {
        return await this.request.post(endpoint, data, options);
    }
    async postMultipart(endpoint, data, filepath, options = {}) {
        return await this.request.postMultipart(endpoint, data, filepath, options);
    }
    async pollResult(request_id) {
        return await this.request.pollResult(request_id, true);
    }
    get request() {
        if (this.request_) {
            return this.request_;
        }
        this.request_ = new PangeaRequest(this.serviceName, this.token, this.config, this.configID);
        return this.request_;
    }
}
export default BaseService;
